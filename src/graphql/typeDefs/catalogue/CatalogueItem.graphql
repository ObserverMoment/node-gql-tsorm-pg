type CatalogueItem {
  id: ID!
  createdAt: String
  updatedAt: String
  code: String
  title: String
  productNotes: String
  packagingNotes: String
  organisation: Organisation
  organisationId: ID
  parcels: [Parcel!]
  productLines: [ProductLine!]
  archivedOn: String
}

extend type Query {
  catalogueItem(id: ID!): CatalogueItem!
  catalogueItems(organisationId: ID!, where: CatalogueItemWhereFilter): [CatalogueItem!]!
}

extend type Mutation {
  createCatalogueItem(input: CreateCatalogueItemInput!): CatalogueItem!
  updateCatalogueItem(id: ID!, input: UpdateCatalogueItemInput!): CatalogueItem!
  archiveCatalogueItem(id: ID!): Boolean!
  deleteCatalogueItem(id: ID!): Boolean!
}

input CatalogueItemWhereFilter {
  and: CatalogueItemFilter
  or: [CatalogueItemFilter]
}

input CatalogueItemFilter {
  id: ID
  createdAt: String
  updatedAt: String
  code: String
  title: String
  productNotes: String
  packagingNotes: String
  organisationId: ID
}

input CreateCatalogueItemInput {
  code: String!
  title: String!
  productNotes: String
  packagingNotes: String
  organisationId: ID!
}

input UpdateCatalogueItemInput {
  code: String
  title: String
  productNotes: String
  packagingNotes: String
}
